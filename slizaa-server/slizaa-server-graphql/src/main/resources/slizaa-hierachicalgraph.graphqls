extend type HierarchicalGraph {

    # Returns the identifier
    identifier: ID!

	# Returns the identifier
    globalIdentifier: ID!

    # Returns the root node
    rootNode: Node!

    # Returns the node with the given id
    node(id: ID!): Node

    # Returns the nodes with the given ids
    nodes(ids: [ID]!): NodeSet!

    # Returns the node with the given id
    dependency(id: ID!): Dependency

    # Returns a dependency set based on an aggregated dependency
    dependencySetForAggregatedDependency(sourceNodeId: ID!, targetNodeId: ID!): DependencySet
}

enum NodeType {
    SOURCE
    TARGET
}

type NodeSet {

	# contained nodes as node array
	nodes: [Node!]!
	
	# the node ids as an array
	nodeIds: [ID!]!
	
	# the dependency matrix
	dependencyMatrix: DependencyMatrix!  
	
	#
	referencedNodes(includePredecessors: Boolean): NodeSet!
}

type Node {

    # The symbolicName for this node
    id: ID!

    # The text label
    text: String!
    iconIdentifier: String!

    # The parent node
    parent: Node
    predecessors: [Node!]!

    #
    hasChildren: Boolean!

    # The children
    children: NodeSet!

    #
    properties: [MapEntry!]!

    #
    dependenciesTo(targetNodes: [ID!]!): [Dependency!]!

    #
    dependenciesFrom(sourceNodes: [ID!]!): [Dependency!]!
}

type Dependency {
    id: ID!
    sourceNode: Node!
    targetNode: Node!
    type: String!
    weight: Int!
    isProxyDependency: Boolean!
    resolvedDependencies: [Dependency!]!
}

type DependencyMatrix {
    orderedNodes: [Node!]!
    cells: [Cell!]!
    stronglyConnectedComponents: [StronglyConnectedComponent!]!
}

type Cell {
    row: Int!
    column: Int!
    value: Int!
}

type StronglyConnectedComponent {

	# contained nodes as node array
	nodes: [Node!]!
	
	# the node ids as an array
	nodeIds: [ID!]!

	nodePositions: [Int!]!
}

type PageInfo {
    pageNumber: Int!
    maxPages: Int!
    pageSize: Int!
    totalCount: Int!
}

type DependencyPage {
    pageInfo: PageInfo
    dependencies: [Dependency!]!
}

type DependencySet {

    #
    size: Int!

    #
    dependencies: [Dependency!]!

    # Returns a dependency page with with the specified size
    dependencyPage(pageNumber: Int!, pageSize: Int!): DependencyPage

    # Returns a set of nodes filtered by the specified node type.
    filteredChildren(parentNode: ID!, parentNodeType: NodeType!): [Node!]!

    #
    filteredChildrenIds(parentNode: ID!, parentNodeType: NodeType!): [String!]!

    #
    filteredDependencies(nodeSelection: [NodeSelection!]!): FilteredDependencies!
}

type FilteredDependencies {

    #
    size: Int!

    #
    dependencies: [Dependency!]!

    # Returns a dependency page with with the specified size
    dependencyPage(pageNumber: Int!, pageSize: Int!): DependencyPage

    #
    nodes(nodeType: NodeType, includedPredecessors: Boolean): [Node!]!

    #
    nodeIds(nodeType: NodeType, includedPredecessors: Boolean): [ID!]!
}

input NodeSelection {

    selectedNodeIds: [ID!]!

    selectedNodesType: NodeType!
}

type MapEntry { key: String!, value: String }

# The Query type
extend type Query {

    svg(identifier: ID!): String!
}

